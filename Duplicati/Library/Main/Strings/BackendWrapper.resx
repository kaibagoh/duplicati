<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BackendNotFoundError" xml:space="preserve">
    <value>Unable to find backend for: {0}</value>
  </data>
  <data name="FileDeleteError2" xml:space="preserve">
    <value>Failed to delete file "{0}": {1}</value>
  </data>
  <data name="FileDownloadError2" xml:space="preserve">
    <value>Failed to download file "{0}": {1}</value>
  </data>
  <data name="FileListingError" xml:space="preserve">
    <value>Failed to retrieve file listing: {0}</value>
  </data>
  <data name="FilenameParseError" xml:space="preserve">
    <value>Unable to parse filenames for the desired volumes</value>
  </data>
  <data name="FilesNotForceRemovedMessage" xml:space="preserve">
    <value>No files removed, specify --force to remove files.</value>
  </data>
  <data name="FileUploadError2" xml:space="preserve">
    <value>Failed to upload file "{0}": {1}</value>
  </data>
  <data name="FunctionLookupError" xml:space="preserve">
    <value>Failed to find function: {0}</value>
  </data>
  <data name="HashMismatchError" xml:space="preserve">
    <value>Hash mismatch on file "{0}", recorded hash: {1}, actual hash {2}</value>
  </data>
  <data name="InvalidEntryTypeError" xml:space="preserve">
    <value>Invalid entry type: {0}</value>
  </data>
  <data name="NoBackupsFoundError" xml:space="preserve">
    <value>No backups found at remote location</value>
  </data>
  <data name="OrphanIncrementalFoundMessage" xml:space="preserve">
    <value>Failed to match incremental package to a full: {0}</value>
  </data>
  <data name="PartialFileFoundMessage" xml:space="preserve">
    <value>Found a partial file, run cleanup to remove: {0}</value>
  </data>
  <data name="RemovingLeftoverFileMessage" xml:space="preserve">
    <value>Removing leftover file: {0}</value>
  </data>
  <data name="StatusMessageDownloading" xml:space="preserve">
    <value>Downloading: {0}</value>
  </data>
  <data name="StatusMessageUploading" xml:space="preserve">
    <value>Uploading: {0} ({1})</value>
  </data>
  <data name="DuplicateFileEntryWarning" xml:space="preserve">
    <value>The file {0} was found multiple times in the file list, this is likely an error in the backend, please report it to the developers</value>
  </data>
  <data name="EmptyManifestWarning" xml:space="preserve">
    <value>Empty backupset detected, this is likely an error: {0}</value>
  </data>
  <data name="RemoveOrphanFileWarning" xml:space="preserve">
    <value>Deleting orphan file: {0}</value>
  </data>
  <data name="UnmatchedFilenameWarning" xml:space="preserve">
    <value>The file {0} was found on the backend but not recognized by Duplicati</value>
  </data>
  <data name="CachedSignatureHashMismatchWarning" xml:space="preserve">
    <value>The cache file {0} did not match the expected hash for the same file, ignoring cache file</value>
  </data>
  <data name="DeleteCacheFileError" xml:space="preserve">
    <value>An error occured while attempting to delete cache file {0}</value>
  </data>
  <data name="SaveCacheFileError" xml:space="preserve">
    <value>Failed to save the cached signature file as {0}</value>
  </data>
  <data name="BackendDoesNotSupportCreateFolder" xml:space="preserve">
    <value>The backend {0} ({1}) does not support the CreateFolder operation </value>
  </data>
  <data name="CachedSignatureDecryptWarning" xml:space="preserve">
    <value>Attempt to decrypt file {0} failed with error: {1}</value>
  </data>
  <data name="TooManyOrphansFoundError" xml:space="preserve">
    <value>Auto-cleanup specified but there are {0} orphan files, and there should not be more than 2</value>
  </data>
  <data name="UploadSizeVerificationFailure" xml:space="preserve">
    <value>The file {0} was uploaded to the server, but the reported filesize was {1} and the size was expected to be {2}</value>
  </data>
  <data name="UploadVerificationFailure" xml:space="preserve">
    <value>The file {0} was uploaded but not found on the server</value>
  </data>
  <data name="FailureWhileDisposingBackendError" xml:space="preserve">
    <value>An error occured while closing a connection: {0}</value>
  </data>
  <data name="DownloadedFileSizeError" xml:space="preserve">
    <value>The file {0} was downloaded and had size {1} but the size was expected to be {2}</value>
  </data>
  <data name="CompletedDeleteTransaction" xml:space="preserve">
    <value>Delete transaction completed successfully</value>
  </data>
  <data name="CompletingDeleteTransactionWarning" xml:space="preserve">
    <value>Completing unfinished delete transaction and removing {0} files</value>
  </data>
  <data name="DeleteTransactionFileFoundWarning" xml:space="preserve">
    <value>A delete operation was started, but failed to complete. Next invocation of a cleanup or delete command will complete the transaction.</value>
  </data>
  <data name="DeleteTransactionFileReadError" xml:space="preserve">
    <value>A previously started delete operation was not completed, but the attempt to recover the operation details failed with the message: {1}.

If this problem happens more than once, it is possible that the delete transaction file is defect. Try renaming the file "{0}" and the run the operation again. If no errors are reported, it is safe to delete the file, otherwise Duplicati will report what needs to be manually corrected.</value>
  </data>
  <data name="DeletingTransactionLeftoverFile" xml:space="preserve">
    <value>Deleting file from delete transaction "{0}"</value>
  </data>
  <data name="ExistingDeleteTransactionError" xml:space="preserve">
    <value>An internal error has occured, a request was made to initiate a delete transaction, but one was already present</value>
  </data>
  <data name="MultipleDeleteTransactionsFoundError" xml:space="preserve">
    <value>There were multiple delete transaction files found. Please manually inspect the target destination and resolve this error.</value>
  </data>
  <data name="NonExistingDeleteTransactionError" xml:space="preserve">
    <value>An internal error has occured, a request was made to complete a delete transaction, but there was not a transaction in progress</value>
  </data>
  <data name="AutoCreateFolderFailed" xml:space="preserve">
    <value>Failed to automatically create folder, error message: {0}</value>
  </data>
</root>